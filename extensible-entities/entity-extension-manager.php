<?php
/**
 * Created by PhpStorm.
 * User: jgeerts
 * Date: 7-8-16
 * Time: 11:43
 */

class EntityExtensionManager
{
    /**
     * @var ExtensibleEntityDescription[]
     */
    protected $entityMap = [];


    public function registerEntity($interfaceName, $providerTraitName)
    {
        if (isset($this->entityMap[$interfaceName])) {
            throw new \RuntimeException("Entity $interfaceName already registered.");
        }

        $this->entityMap[$interfaceName] = new ExtensibleEntityDescription($interfaceName,  $providerTraitName);
    }

    public function registerExtension($entityInterfaceName, $extensionInterfaceName, $providerTraitName)
    {
        $entityDescription = $this->getEntityDescription($entityInterfaceName);

        $entityDescription->addExtension(
            new EntityExtension($extensionInterfaceName, $providerTraitName)
        );
    }

    /**
     * @param $interfaceName
     * @return object
     */
    public function getExtendedEntity($interfaceName)
    {
        $entityDescription = $this->getEntityDescription($interfaceName);

        $implementorNamespaceElements = [
            'EEM',
            'ImplementationCache',
            $entityDescription->getInterfaceName(),
            $this->classNameListToUnifiedName($entityDescription->getInterfaces()),
            $this->classNameListToUnifiedName($entityDescription->getTraits()),
        ];

        $implementorNamespace = implode('\\', $implementorNamespaceElements);
        $implementorClassname = $entityDescription->getInterfaceName() . 'GeneratedImplementation';

        $fullyQuallifiedImplementorClassname = '\\' . $implementorNamespace . '\\' . $implementorClassname;

        $destFileDir = './cache/' . str_replace('\\', '/', $implementorNamespace);
        $destFile = $destFileDir . DIRECTORY_SEPARATOR . $implementorClassname . '.php';

        if (!is_dir($destFileDir)) {
            mkdir($destFileDir, 0777, true);
        }

        $classContents = [
            '<?php',
            '/* Generated by the entity extension manager. Do not change this file. Ideally, do not commit it to your version control either. */',
            '',
            'namespace ' . $implementorNamespace . ';',
            '',
            'class ' . $implementorClassname . ' implements \\' . implode(', \\', $entityDescription->getInterfaces()),
            '{',
            'use \\' . implode(', \\', $entityDescription->getTraits()) . ';',
            '}'
        ];

        file_put_contents($destFile, implode(PHP_EOL, $classContents));

        require $destFile;
        return new $fullyQuallifiedImplementorClassname();
        //highlight_string(implode(PHP_EOL, $classContents));

        //var_dump($className);
    }

    protected function classNameListToUnifiedName(array $names)
    {
        $names = array_map(function($nameSpacedName) {
            return str_replace('\\', '_', $nameSpacedName);
        }, $names);

        sort($names);

        return implode($names, '_');
    }

    /**
     * @param $entityInterfaceName
     * @return ExtensibleEntityDescription
     */
    protected function getEntityDescription($entityInterfaceName)
    {
        if (!isset($this->entityMap[$entityInterfaceName])) {
            throw new \RuntimeException("Unknown entity $entityInterfaceName.");
        }
        return $this->entityMap[$entityInterfaceName];
    }
}

class ExtensibleEntityDescription
{
    /**
     * @var string
     */
    private $interfaceName;
    /**
     * @var string
     */
    private $providerTraitName;
    /**
     * @var array
     */
    private $extensions = [];

    /**
     * ExtendableEntityMap constructor.
     * @param string $interfaceName
     * @param string $providerTraitName
     */
    public function __construct($interfaceName, $providerTraitName)
    {
        $this->interfaceName = $interfaceName;
        $this->providerTraitName = $providerTraitName;
    }

    public function addExtension(EntityExtension $extension)
    {
        $this->extensions[] = $extension;
    }

    /**
     * @return string
     */
    public function getInterfaceName()
    {
        return $this->interfaceName;
    }

    public function getInterfaces()
    {
        $interfaces = array_map(
                function (EntityExtension $extension) {
                    return $extension->getInterfaceName();
                },
                $this->extensions
            );

        array_unshift($interfaces, $this->interfaceName);

        return array_unique($interfaces);

    }

    public function getTraits()
    {
        $traits = array_map(
                function (EntityExtension $extension) {
                    return $extension->getProviderTraitName();
                },
                $this->extensions
            );

        array_unshift($traits, $this->providerTraitName);

        return array_unique($traits);
    }

}

class EntityExtension
{
    /**
     * @var string
     */
    private $interfaceName;
    /**
     * @var string
     */
    private $providerTraitName;

    /**
     * EntityExtension constructor.
     * @param string $interfaceName
     * @param string $providerTraitName
     */
    public function __construct($interfaceName, $providerTraitName)
    {
        $this->interfaceName = $interfaceName;
        $this->providerTraitName = $providerTraitName;
    }

    /**
     * @return string
     */
    public function getInterfaceName()
    {
        return $this->interfaceName;
    }

    /**
     * @return string
     */
    public function getProviderTraitName()
    {
        return $this->providerTraitName;
    }


}